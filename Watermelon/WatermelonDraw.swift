//
//  WatermelonDraw.swift
//  Watermelon
//
//  Created by Gleb Shendrik on 28/09/2018.
//  Copyright Â© 2018 Gleb Shendrik. All rights reserved.
//
//  Generated by PaintCode
//  http://www.paintcodeapp.com
//



import UIKit

public class WatermelonDraw : NSObject {

    //// Cache

    private struct Cache {
        static let green1: UIColor = UIColor(red: 0.671, green: 0.784, blue: 0.216, alpha: 1.000)
        static let red1: UIColor = UIColor(red: 1.000, green: 0.451, blue: 0.451, alpha: 1.000)
    }

    //// Colors

    @objc dynamic public class var green1: UIColor { return Cache.green1 }
    @objc dynamic public class var red1: UIColor { return Cache.red1 }

    //// Drawing Methods

    @objc dynamic public class func drawWatermelonCircle(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 240, height: 240), resizing: ResizingBehavior = .aspectFit, circleRedSize: CGSize = CGSize(width: 180, height: 180), circleGreenSize: CGSize = CGSize(width: 200, height: 200), circleRedPosition: CGPoint = CGPoint(x: 30, y: 30), circleGreenPosition: CGPoint = CGPoint(x: 20, y: 20)) {
        //// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        //// Resize to Target Frame
        context.saveGState()
        let resizedFrame: CGRect = resizing.apply(rect: CGRect(x: 0, y: 0, width: 240, height: 240), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 240, y: resizedFrame.height / 240)


        //// Color Declarations
        let color = UIColor(red: 0.000, green: 1.000, blue: 0.193, alpha: 1.000)

        //// Oval Drawing
        let ovalPath = UIBezierPath(ovalIn: CGRect(x: circleGreenPosition.x, y: circleGreenPosition.y, width: circleGreenSize.width, height: circleGreenSize.height))
        color.setFill()
        ovalPath.fill()


        //// Oval 2 Drawing
        let oval2Path = UIBezierPath(ovalIn: CGRect(x: circleRedPosition.x, y: circleRedPosition.y, width: circleRedSize.width, height: circleRedSize.height))
        UIColor.red.setFill()
        oval2Path.fill()
        
        context.restoreGState()

    }




    @objc(WatermelonDrawResizingBehavior)
    public enum ResizingBehavior: Int {
        case aspectFit /// The content is proportionally resized to fit into the target rectangle.
        case aspectFill /// The content is proportionally resized to completely fill the target rectangle.
        case stretch /// The content is stretched to match the entire target rectangle.
        case center /// The content is centered in the target rectangle, but it is NOT resized.

        public func apply(rect: CGRect, target: CGRect) -> CGRect {
            if rect == target || target == CGRect.zero {
                return rect
            }

            var scales = CGSize.zero
            scales.width = abs(target.width / rect.width)
            scales.height = abs(target.height / rect.height)

            switch self {
                case .aspectFit:
                    scales.width = min(scales.width, scales.height)
                    scales.height = scales.width
                case .aspectFill:
                    scales.width = max(scales.width, scales.height)
                    scales.height = scales.width
                case .stretch:
                    break
                case .center:
                    scales.width = 1
                    scales.height = 1
            }

            var result = rect.standardized
            result.size.width *= scales.width
            result.size.height *= scales.height
            result.origin.x = target.minX + (target.width - result.width) / 2
            result.origin.y = target.minY + (target.height - result.height) / 2
            return result
        }
    }
}
